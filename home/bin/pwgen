#!/usr/bin/env python

import random
import optparse

prefix  = "b bl br c ch cl cr d dr f fr g gh h j k l m n p ph qu r s sc sh st v w wh x y z".split()
midfix  = "a ae e ea ee ei i ie io o oo ou u".split()
postfix = "b c cd ch ck ct d de f g ing j k l m mn n nd p pt q r rt s st sh t v w x y z".split()

def pwgen(n):
    pw = []
    for i in range(n):
        syl = random.choice(prefix) + random.choice(midfix) + random.choice(postfix)
        pw.append(syl)
    
    return '-'.join(pw)
    
if __name__ == '__main__':
    
    usage = "usage: %prog [options]"
    parser = optparse.OptionParser()
    
    parser.add_option('-n', '--number',
                      dest    = 'n',
                      action  = 'store',
                      type    = 'int',
                      default = 10,
                      help    = "Number of passwords to generate (defaults to 10)"  
    )
    
    parser.add_option('-l', '--length',
                      dest    = 'max_length',
                      action  = 'store',
                      type    = 'int',
                      default = 3,
                      help    = "Maximum number of syllables (defaults to 3)"
    )
    
    parser.add_option('-m', '--min-length',
                      dest    = 'min_length',
                      action  = 'store',
                      type    = 'int',
                      default = 2,
                      help    = "Minimum number of syllables (defaults to 2)"
    )
    
    parser.add_option('-H', '--hash',
                      action  = 'store_true',
                      default = False,
                      help    = "Generate md5 hashes"
    )
    
    (options, args) = parser.parse_args()
    
    min = options.min_length
    max = options.max_length
    passwords = [pwgen(random.randint(min, max)) for i in range(options.n)]
    if options.hash:
        import md5
        hashes = [md5.new(p).hexdigest() for p in passwords]
        for i in range(len(passwords)):
            print passwords[i], "==>", hashes[i]
    else:
        for p in passwords:
            print p